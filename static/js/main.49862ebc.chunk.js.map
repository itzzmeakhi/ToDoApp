{"version":3,"sources":["components/Navbar/Navbar.js","components/Tasks/Task.js","components/Tasks/Tasks.js","components/Tasks/TaskAdd/TaskAdd.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","Component","Task","props","className","darkMode","style","fontSize","task","backgroundColor","fontWeight","padding","margin","border","borderRadius","outline","onClick","remove","Tasks","marginBottom","listStyle","tasks","map","index","components_Tasks_Task","key","TaskAdd","display","marginRight","type","onChange","this","changed","placeholder","clicked","width","textAlign","marginTop","App","state","tasksRemain","addTask","onChangeHandler","event","_this","setState","target","value","addTaskHandler","concat","Object","toConsumableArray","removeTaskHandler","beforeTasks","slice","afterTasks","console","log","darkModeHandler","bColor","color","height","buttonClasses","push","numTasks","length","components_Navbar_Navbar","join","Tasks_TaskAdd_TaskAdd","components_Tasks_Tasks","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8UAeeA,0LARP,OACIC,EAAAC,EAAAC,cAAA,cACIF,EAAAC,EAAAC,cAAA,+BALKC,cC2CNC,SA5CJ,SAACC,GA2BR,OACIL,EAAAC,EAAAC,cAAA,MAAII,UAAWD,EAAME,SAAW,uBAAwB,yBACpDP,EAAAC,EAAAC,cAAA,KACIM,MA5BI,CACZC,SAAU,SA4BDJ,EAAMK,MAGXV,EAAAC,EAAAC,cAAA,UACIM,MA7Be,CACvBG,gBAAiB,UACjBC,WAAY,OACZC,QAAS,OACTC,OAAQ,SACRC,OAAQ,cACRC,aAAc,MACdC,QAAS,OACTR,SAAU,QAsBFS,QAASb,EAAMc,QAFnB,gBCIGC,SArCH,SAACf,GAUV,OAECL,EAAAC,EAAAC,cAAA,OAAKI,UAAU,eACXN,EAAAC,EAAAC,cAAA,MAAIM,MAXU,CACda,aAAc,SAUd,2BACArB,EAAAC,EAAAC,cAAA,MAAIM,MARQ,CACZc,UAAW,SAUPjB,EAAMkB,MAAMC,IAAI,SAACd,EAAMe,GACnB,OAEIzB,EAAAC,EAAAC,cAACwB,EAAD,CACIP,OAAQ,kBAAId,EAAMc,OAAOM,IACzBf,KAAMA,EAAMiB,IAAKF,EACjBlB,SAAUF,EAAME,iBCsCzBqB,0LA9BP,OAEI5B,EAAAC,EAAAC,cAAA,OAAKI,UAAU,YAEXN,EAAAC,EAAAC,cAAA,MACIM,MAtBO,CACfa,aAAc,SAoBV,sBAKArB,EAAAC,EAAAC,cAAA,SACIM,MArCK,CACbK,QAAS,MACTgB,QAAS,eACTd,OAAQ,iBACRC,aAAc,MACdc,YAAa,OACbrB,SAAU,OACVQ,QAAS,QA+BDc,KAAK,OACLC,SAAUC,KAAK5B,MAAM6B,QACrBC,YAAY,wBAGhBnC,EAAAC,EAAAC,cAAA,UACIgB,QAASe,KAAK5B,MAAM+B,QACpB5B,MA/BM,CACdK,QAAS,OACTwB,MAAO,MACPC,UAAW,SACXC,UAAW,OACX3B,WAAY,OACZD,gBAAiB,UACjBkB,QAAS,eACTd,OAAQ,cACRC,aAAc,MACdP,SAAU,SAmBN,eA/CMN,cCmJPqC,oNA3IbC,MAAQ,CACNC,YAAa,CAAC,WAAY,WAC1BC,QAAS,GACTpC,UAAU,KAKZqC,gBAAkB,SAACC,GACjBC,EAAKC,SAAS,CACZJ,QAASE,EAAMG,OAAOC,WAM1BC,eAAiB,WACfJ,EAAKC,SAAS,CACZL,YAAW,GAAAS,OAAAC,OAAAC,EAAA,EAAAD,CAAMN,EAAKL,MAAMC,aAAjB,CAA8BI,EAAKL,MAAME,UACpDA,QAAS,QAMbW,kBAAoB,SAAA7B,GAClB,IAAM8B,EAAcT,EAAKL,MAAMC,YAAYc,MAAM,EAAG/B,GAC9CgC,EAAaX,EAAKL,MAAMC,YAAYc,MAAM/B,EAAM,GAEhDF,EAAK,GAAA4B,OAAAC,OAAAC,EAAA,EAAAD,CAAOG,GAAPH,OAAAC,EAAA,EAAAD,CAAuBK,IAElCC,QAAQC,IAAIpC,GAEZuB,EAAKC,SAAS,CACZL,YAAanB,OAMjBqC,gBAAkB,WAChBd,EAAKC,SAAS,CACZxC,UAAWuC,EAAKL,MAAMlC,oFASxB,IAAIsD,EAAS,CACXlD,gBAAiB,UACjBmD,MAAO,UACPC,OAAQ,SAiBNC,EAAgB,GAIpBA,EAAcC,KAAK,QAIhBhC,KAAKQ,MAAMlC,SACZyD,EAAcC,KAAK,WAAY,cAG/BD,EAAcC,KAAK,YAAa,cAM/BhC,KAAKQ,MAAMlC,WAEZsD,EAAS,CACPlD,gBAAiB,UACjBmD,MAAO,UACPC,OAAQ,UAMZ,IAAIG,EAAWjC,KAAKQ,MAAMC,YAAYyB,OAEtC,OAEEnE,EAAAC,EAAAC,cAAA,OAAKM,MAAOqD,EAAQvD,UAAU,OAE5BN,EAAAC,EAAAC,cAACkE,EAAD,MAEApE,EAAAC,EAAAC,cAAA,UACEM,MAlDY,CAChBK,QAAS,OACTE,OAAQ,oBACRC,aAAc,OACdC,QAAS,OACTY,QAAS,QACTf,OAAQ,YACRL,SAAU,QA4CNS,QAASe,KAAK2B,gBACdtD,UAAW0D,EAAcK,KAAK,MAC5BpC,KAAKQ,MAAMlC,SAAW,QAAS,OAJnC,SAOAP,EAAAC,EAAAC,cAACoE,EAAD,CACEpC,QAASD,KAAKW,gBACdR,QAASH,KAAKiB,eACd/B,OAAQc,KAAKqB,oBAEA,IAAbY,EACAlE,EAAAC,EAAAC,cAAA,KAAGI,UAAW2B,KAAKQ,MAAMlC,SAAW,0BAA0B,4BAA9D,YAIAP,EAAAC,EAAAC,cAACqE,EAAD,CACEhD,MAAOU,KAAKQ,MAAMC,YAClBvB,OAAQc,KAAKqB,kBACb/C,SAAU0B,KAAKQ,MAAMlC,mBAlIfJ,cCEEqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9E,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.49862ebc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Navbar.css';\n\n\nclass Navbar extends Component {\n\n    render() {\n        return(\n            <header>\n                <h1> ToDoApp </h1>\n            </header>\n        )\n    }\n}\n\nexport default Navbar;","import React from 'react';\nimport './Task.css';\n\nconst Task=(props)=> {\n\n    let styleText = {\n        fontSize: '160%'\n    };\n\n    let styleCompletedButton = {\n        backgroundColor: '#00b894',\n        fontWeight: 'bold',\n        padding: '10px',\n        margin: '15px 0',\n        border: 'transparent',\n        borderRadius: '5px',\n        outline: 'none',\n        fontSize: '100%'\n    };\n\n  /*   let styleListItem = {\n        background: 'white',\n        color: 'black',\n        opacity: '0.7',\n        borderRadius: '5px',\n        padding: '10px',\n        marginBottom: '10px'\n    } */\n\n\n    return(\n        <li className={props.darkMode ? 'list-style dark-mode': 'list-style light-mode'}>\n            <p \n                style={styleText}> \n                {props.task} \n            </p>\n\n            <button \n                style={styleCompletedButton}\n                onClick={props.remove}> \n                Completed \n            </button>\n        </li>\n                       \n    )\n}\n\nexport default Task;","import React from 'react';\nimport Task from './Task';\nimport './Tasks.css';\n\nconst Tasks=(props)=> {\n\n    let styleHeader = {\n        marginBottom: '20px'\n    };\n\n    let styleList = {\n        listStyle: 'none'\n    }\n\n   return (\n\n    <div className=\"task-remain\">\n        <h1 style={styleHeader}> Tasks to be completed </h1>\n        <ul style={styleList}>\n\n        {\n            props.tasks.map((task, index) => {\n                return (\n                    \n                    <Task \n                        remove={()=>props.remove(index)} \n                        task={task} key={index} \n                        darkMode={props.darkMode}/>\n                )\n            })\n\n        }\n\n        </ul>\n\n    </div>\n\n   )\n\n};\n\nexport default Tasks;","import React, { Component } from 'react';\nimport './TaskAdd.css';\n\n\nclass TaskAdd extends Component {\n\n    render() {\n\n        let styleInput = {\n            padding: '6px',\n            display: 'inline-block',\n            border: '2px solid #ccc',\n            borderRadius: '5px',\n            marginRight: '30px',\n            fontSize: '140%',\n            outline: 'none',\n        };\n\n        let styleHeading = {\n            marginBottom: '20px'\n        }\n\n        let buttonStyle = {\n            padding: '14px',\n            width: '20%',\n            textAlign: 'center',\n            marginTop: '10px',\n            fontWeight: 'bold',\n            backgroundColor: '#74b9ff',\n            display: 'inline-block',\n            border: 'transparent',\n            borderRadius: '5px',\n            fontSize: '120%'\n        }\n\n        return(\n\n            <div className=\"task-add\">\n\n                <h1 \n                    style={styleHeading}> \n                    Add your task here \n                </h1>\n\n                <input \n                    style={styleInput} \n                    type=\"text\" \n                    onChange={this.props.changed} \n                    placeholder=\"Enter Task here..!!\">\n                </input>\n\n                <button \n                    onClick={this.props.clicked}\n                    style={buttonStyle}>\n                    Add\n                </button>\n\n            </div>\n\n\n        )\n   \n    };\n}\n\nexport default TaskAdd;","\nimport React, { Component } from 'react';\nimport Navbar from './components/Navbar/Navbar';\nimport Tasks from './components/Tasks/Tasks';\nimport TaskAdd from './components/Tasks/TaskAdd/TaskAdd';\nimport './App.css';\n\n\n\n\nclass App extends Component {\n\n  state = {\n    tasksRemain: ['Homework', 'Reading'],\n    addTask: '',\n    darkMode: false\n  };\n\n  // Assigns Value in the Input field\n\n  onChangeHandler = (event) => {\n    this.setState({\n      addTask: event.target.value\n    });\n  }\n\n  // Adds Task to the array\n\n  addTaskHandler = () => {\n    this.setState({\n      tasksRemain: [...this.state.tasksRemain, this.state.addTask],\n      addTask: ''\n    });\n  }\n\n  // Removes tasks from the tasks array\n\n  removeTaskHandler = index => {\n    const beforeTasks = this.state.tasksRemain.slice(0, index);\n    const afterTasks = this.state.tasksRemain.slice(index+1);\n\n    const tasks = [...beforeTasks, ...afterTasks];\n\n    console.log(tasks);\n\n    this.setState({\n      tasksRemain: tasks\n    });\n  }\n\n  // Handles the mode of our application\n\n  darkModeHandler = () => {\n    this.setState({\n      darkMode: !this.state.darkMode \n    })\n  }\n\n\n  render() {\n\n    // Inline Styling for Background color\n\n    let bColor = {\n      backgroundColor: '#ffffff',\n      color: '#000000',\n      height: '100vh'\n    }\n\n    // Button style for Dark Mode Option\n\n    let buttonStyle = {\n      padding: '10px',\n      border: '1px solid #000000',\n      borderRadius: '10px',\n      outline: 'none',\n      display: 'block',\n      margin: '10px auto',\n      fontSize: '100%'\n    }\n\n    // Adding classes dynamically\n\n    let buttonClasses = []\n\n    // Pushing bold class into the array\n\n    buttonClasses.push('bold');\n\n    // Checking the Mode and dynamically pushing a CSS class\n\n    if(this.state.darkMode) {\n      buttonClasses.push('green-bg', 'black-font');\n      //console.log(buttonClasses);\n    } else {\n      buttonClasses.push('orange-bg', 'black-font');\n      //console.log(buttonClasses);\n    }\n\n    // Conditional Styling \n\n    if(this.state.darkMode) {\n      //console.log(\"dark\")\n      bColor = {\n        backgroundColor: '#2d3436',\n        color: '#ffffff',\n        height: '100vh'\n      };\n    }\n\n    // console.log(this.state.darkMode)\n\n    let numTasks = this.state.tasksRemain.length\n    \n    return(\n\n      <div style={bColor} className='App'>\n\n        <Navbar />\n\n        <button \n          style={buttonStyle} \n          onClick={this.darkModeHandler}\n          className={buttonClasses.join(' ')}> \n          { this.state.darkMode ? 'Light': 'Dark' } Mode \n        </button>\n        \n        <TaskAdd \n          changed={this.onChangeHandler} \n          clicked={this.addTaskHandler} \n          remove={this.removeTaskHandler}/>\n\n        { numTasks === 0 ? \n          <p className={this.state.darkMode ? 'no-task-alert dark-mode':'no-task-alert light-mode'}> \n          No Tasks\n          </p> : \n      \n          <Tasks \n            tasks={this.state.tasksRemain} \n            remove={this.removeTaskHandler}\n            darkMode={this.state.darkMode}/>\n        }\n   \n      </div>\n\n        \n    )\n  }\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}